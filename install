
function Test-IsAdmin {
    $currentIdentity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object System.Security.Principal.WindowsPrincipal($currentIdentity)
    return $principal.IsInRole([System.Security.Principal.WindowsBuiltInRole]::Administrator)
}


if (-not (Test-IsAdmin)) {
    Write-Host "Необходимы права администратора. Перезапуск скрипта с правами администратора..." -ForegroundColor Green
    Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    exit
}


$ErrorActionPreference = "Stop"


try {
    Stop-Process -Name "winws" -Force -ErrorAction SilentlyContinue
    Write-Host "Процесс winws завершён." -ForegroundColor Green
} catch {
    Write-Host "Процесс winws не был найден." -ForegroundColor Green
}


$services = @("zapret", "windivert", "windivert14")
foreach ($service in $services) {
    try {
        Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
        Write-Host "Служба $service остановлена." -ForegroundColor Green
    } catch {
        Write-Host "Служба $service не была найдена." -ForegroundColor Green
    }
    
    try {
        sc.exe delete $service | Out-Null
        Write-Host "Служба $service удалена." -ForegroundColor Green
    } catch {
        Write-Host "Не удалось удалить службу $service." -ForegroundColor Green
    }
}


$DownloadsPath = [System.IO.Path]::Combine([System.Environment]::GetFolderPath('UserProfile'), 'Downloads')
$DesktopPath = [System.IO.Path]::Combine([System.Environment]::GetFolderPath('Desktop'))


$Url = "https://github.com/vayulqq/zapret/releases/download/zapret/zapret_vayul.zip"


$ArchivePath = Join-Path $DownloadsPath "zapret_vayul.zip"
$ExtractedPath = Join-Path $DesktopPath "zapret_vayul"


if (Test-Path $ArchivePath) {
    Remove-Item -Path $ArchivePath -Force
    Write-Host "Старый архив удалён из загрузок." -ForegroundColor Green
}

if (Test-Path $ExtractedPath) {
    Remove-Item -Path $ExtractedPath -Recurse -Force
    Write-Host "Старая папка удалена с рабочего стола." -ForegroundColor Green
}


Write-Host "Скачивание архива..." -ForegroundColor Green
Invoke-WebRequest -Uri $Url -OutFile $ArchivePath
Write-Host "Архив загружен в папку загрузок." -ForegroundColor Green


function Test-ZipFile {
    param ([string]$FilePath)
    try {
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::OpenRead($FilePath).Dispose()
        return $true
    } catch {
        return $false
    }
}

if (-Not (Test-ZipFile -FilePath $ArchivePath)) {
    Write-Host "Ошибка: Файл $ArchivePath не является действительным ZIP-архивом или повреждён." -ForegroundColor Green
    exit
}


Write-Host "Распаковка архива..." -ForegroundColor Green
$TempExtractPath = Join-Path $DownloadsPath "temp_zapret_vayul"


if (Test-Path $TempExtractPath) {
    Remove-Item -Path $TempExtractPath -Recurse -Force
    Write-Host "Старая временная папка temp_zapret_vayul удалена." -ForegroundColor Green
}

New-Item -ItemType Directory -Path $TempExtractPath | Out-Null


Add-Type -AssemblyName System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::ExtractToDirectory($ArchivePath, $TempExtractPath)
Write-Host "Архив успешно распакован во временную папку." -ForegroundColor Green


$InnerFolder = Get-ChildItem -Path $TempExtractPath -Directory | Select-Object -First 1
if ($null -eq $InnerFolder) {
    Write-Host "Ошибка: В архиве не найдена папка." -ForegroundColor Green
    Remove-Item -Path $TempExtractPath -Recurse -Force
    exit
}

Move-Item -Path $InnerFolder.FullName -Destination $ExtractedPath
Write-Host "Папка $($InnerFolder.Name) перемещена на рабочий стол как $ExtractedPath." -ForegroundColor Green


Remove-Item -Path $TempExtractPath -Recurse -Force
if (Test-Path $ArchivePath) {
    Remove-Item -Path $ArchivePath -Force
    Write-Host "Архив удалён из загрузок." -ForegroundColor Green
}

Write-Host "Скрипт выполнен успешно." -ForegroundColor Green
pause
