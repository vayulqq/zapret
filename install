# Устанавливаем стратегию обработки ошибок
$ErrorActionPreference = "Stop"

# Завершаем процесс winws, если он работает
try {
    Stop-Process -Name "winws" -Force -ErrorAction SilentlyContinue
    Write-Host "Процесс winws завершён."
} catch {
    Write-Host "Процесс winws не был найден."
}

# Останавливаем и удаляем службы
$services = @("zapret", "windivert", "windivert14")
foreach ($service in $services) {
    try {
        Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
        Write-Host "Служба $service остановлена."
    } catch {
        Write-Host "Служба $service не была найдена."
    }
    
    try {
        sc.exe delete $service | Out-Null
        Write-Host "Служба $service удалена."
    } catch {
        Write-Host "Не удалось удалить службу $service."
    }
}

### Параметры путей для загрузок и рабочего стола
$DownloadsPath = [System.IO.Path]::Combine([System.Environment]::GetFolderPath('UserProfile'), 'Downloads')
$DesktopPath = [System.IO.Path]::Combine([System.Environment]::GetFolderPath('Desktop'))

# Ссылка на архив
$Url = "https://github.com/vayulqq/zapret/releases/download/zapret/zapret_vayul.zip"

# Локальные пути для архива и распакованной папки
$ArchivePath = Join-Path $DownloadsPath "zapret_vayul.zip"
$ExtractedPath = Join-Path $DesktopPath "zapret_vayul"

# Удаляем старые файлы, если они существуют
if (Test-Path $ArchivePath) {
    Remove-Item -Path $ArchivePath -Force
    Write-Host "Старый архив удалён из загрузок."
}

if (Test-Path $ExtractedPath) {
    Remove-Item -Path $ExtractedPath -Recurse -Force
    Write-Host "Старая папка удалена с рабочего стола."
}

# Скачиваем архив
Write-Host "Скачивание архива..."
Invoke-WebRequest -Uri $Url -OutFile $ArchivePath
Write-Host "Архив загружен в папку загрузок."

# Проверка целостности архива
function Test-ZipFile {
    param ([string]$FilePath)
    try {
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::OpenRead($FilePath).Dispose()
        return $true
    } catch {
        return $false
    }
}

if (-Not (Test-ZipFile -FilePath $ArchivePath)) {
    Write-Host "Ошибка: Файл $ArchivePath не является действительным ZIP-архивом или повреждён."
    exit
}

# Распаковываем архив во временную папку
Write-Host "Распаковка архива..."
$TempExtractPath = Join-Path $DownloadsPath "temp_zapret_vayul"

# Удаляем временную папку, если существует
if (Test-Path $TempExtractPath) {
    Remove-Item -Path $TempExtractPath -Recurse -Force
}

New-Item -ItemType Directory -Path $TempExtractPath | Out-Null

# Распаковываем архив
Add-Type -AssemblyName System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::ExtractToDirectory($ArchivePath, $TempExtractPath)
Write-Host "Архив успешно распакован во временную папку."

# Находим внутреннюю папку и перемещаем её на рабочий стол
$InnerFolder = Get-ChildItem -Path $TempExtractPath -Directory | Select-Object -First 1
if ($null -eq $InnerFolder) {
    Write-Host "Ошибка: В архиве не найдена папка."
    Remove-Item -Path $TempExtractPath -Recurse -Force
    exit
}

Move-Item -Path $InnerFolder.FullName -Destination $ExtractedPath
Write-Host "Папка $($InnerFolder.Name) перемещена на рабочий стол как $ExtractedPath."

# Очищаем временные файлы
Remove-Item -Path $TempExtractPath -Recurse -Force
if (Test-Path $ArchivePath) {
    Remove-Item -Path $ArchivePath -Force
    Write-Host "Архив удалён из загрузок."
}

Write-Host "Скрипт выполнен успешно."
