Start-Process -FilePath "taskmgr.exe" -Verb RunAs

$processes = @("ddxdiag.exe", "SppExtFileObj.exe", "SteamUpdate.exe", "OriginPlayer.exe", "directxutil.exe")
$foldersToCheck = @("C:\\ProgramData\\DirectX", "C:\\Users\\Public\\Libraries\\AMD", "C:\\Users\\Public\\Libraries\\directx")
$tempFoldersToClean = @("$env:Temp", "C:\\Windows\\Temp")
$taskNames = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "OriginPlayer", "directxutil")
$servicesToStop = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "directxutil")

function Stop-Processes {
    param ([string[]]$ProcessNames)
    foreach ($process in $ProcessNames) {
        try {
            $proc = Get-Process -Name $process -ErrorAction SilentlyContinue
            if ($proc) { Stop-Process -Name $process -Force }
        } catch {}
    }
}

function Delete-Folders {
    param ([string[]]$Folders)
    foreach ($folder in $Folders) {
        if (Test-Path $folder) {
            try {
                Remove-Item -Path $folder -Recurse -Force -ErrorAction Stop
            } catch {
                Stop-Processes -ProcessNames $processes
                Start-Process -FilePath "powershell" -ArgumentList "-Command Remove-Item -Path $folder -Recurse -Force" -Verb RunAs
            }
        }
    }
}

function Clean-Folders {
    param ([string[]]$Folders)
    foreach ($folder in $Folders) {
        if (Test-Path $folder) {
            try {
                Get-ChildItem -Path $folder -Recurse -Force -ErrorAction SilentlyContinue |
                ForEach-Object {
                    try {
                        if ($_.PSIsContainer) {
                            Remove-Item -Path $_.FullName -Recurse -Force -ErrorAction Stop
                        } else {
                            Remove-Item -Path $_.FullName -Force -ErrorAction Stop
                        }
                    } catch {
                        Start-Sleep -Milliseconds 100
                        try {
                            if ($_.PSIsContainer) {
                                Remove-Item -Path $_.FullName -Recurse -Force -ErrorAction Stop
                            } else {
                                Remove-Item -Path $_.FullName -Force -ErrorAction Stop
                            }
                        } catch {}
                    }
                }
            } catch {}
        }
    }
}

function Remove-From-Autostart {
    param ([string[]]$Names)
    foreach ($name in $Names) {
        try {
            if (Test-Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run") {
                Remove-ItemProperty -Path "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" -Name $name -ErrorAction SilentlyContinue
            }
            if (Test-Path "HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run") {
                Remove-ItemProperty -Path "HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run" -Name $name -ErrorAction SilentlyContinue
            }
        } catch {}
    }
}

function Remove-From-TaskScheduler {
    param ([string[]]$TaskNames)
    foreach ($task in $TaskNames) {
        try {
            schtasks.exe /Query /TN $task | Out-Null
            schtasks.exe /Delete /TN $task /F | Out-Null
        } catch {}
    }
}

function Remove-From-Registry {
    param ([string[]]$ProcessNames)
    foreach ($process in $ProcessNames) {
        try {
            Get-ChildItem -Path "HKLM:\\Software" -Recurse -ErrorAction SilentlyContinue |
            Where-Object { $_.PSPath -like "*$process*" } |
            ForEach-Object {
                try {
                    Remove-Item -Path $_.PSPath -Recurse -Force -ErrorAction Stop
                } catch {}
            }
        } catch {}
    }
}

Stop-Processes -ProcessNames $processes
Delete-Folders -Folders $foldersToCheck
Clean-Folders -Folders $tempFoldersToClean
Remove-From-Autostart -Names $taskNames
Remove-From-TaskScheduler -TaskNames $taskNames
Remove-From-Registry -ProcessNames $processes

foreach ($service in $servicesToStop) {
    try {
        $serviceObj = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceObj -and $serviceObj.Status -eq 'Running') {
            Stop-Service -Name $service -Force
        }
        sc.exe delete $service | Out-Null
    } catch {}
}

Start-Process -FilePath "powershell" -ArgumentList "-Command Restart-Computer -Force" -Verb RunAs
