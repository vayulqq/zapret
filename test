Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

# Функция для проверки безопасного режима
function Check-SafeMode {
    $safeModeKey = "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Option"
    if (Test-Path $safeModeKey) {
        $safeModeValue = Get-ItemProperty -Path $safeModeKey -ErrorAction SilentlyContinue
        if ($safeModeValue.Option -eq 1) {
            return $true
        }
    }
    return $false
}

# Функция для проверки прав администратора
function Check-AdminRights {
    $adminGroup = [System.Security.Principal.WindowsBuiltInRole]::Administrator
    $identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object System.Security.Principal.WindowsPrincipal($identity)
    return $principal.IsInRole($adminGroup)
}

# Основные проверки
$safeMode = Check-SafeMode
$isAdmin = Check-AdminRights

if (-not $safeMode) {
    Write-Host "Система не запущена в безопасном режиме. Включите безопасный режим и повторите запуск." -ForegroundColor Yellow
    return
}

if (-not $isAdmin) {
    Write-Host "Скрипт не запущен от имени администратора. Перезапустите PowerShell с правами администратора." -ForegroundColor Yellow
    return
}

Write-Host "Все проверки пройдены. Скрипт работает в безопасном режиме и под правами администратора." -ForegroundColor Green

# Переменные
$processes = @("ddxdiag.exe", "SppExtFileObj.exe", "SteamUpdate.exe", "OriginPlayer.exe", "directxutil.exe", "winws.exe")
$foldersToCheck = @("C:\ProgramData\DirectX", "C:\Users\Public\Libraries\AMD", "C:\Users\Public\Libraries\directx")
$tempFoldersToClean = @($env:Temp, "C:\Windows\Temp")
$taskNames = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "OriginPlayer", "directxutil", "winws")
$servicesToStop = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "directxutil", "DrvSvc", "zapret", "zapret DPI bypass", "windivert")
$taskFilesToDelete = @("C:\Windows\System32\Tasks\DirectXUtilTask", "C:\Windows\System32\Tasks\WinAMDTweak")

# Функции
function Stop-Processes {
    param ([string[]]$ProcessNames)
    foreach ($process in $ProcessNames) {
        try {
            Stop-Process -Name $process -Force -ErrorAction SilentlyContinue
        } catch {}
    }
}

function Delete-Folders {
    param ([string[]]$Folders)
    foreach ($folder in $Folders) {
        if (Test-Path $folder) {
            try {
                Remove-Item -Path $folder -Recurse -Force -ErrorAction SilentlyContinue
            } catch {}
        }
    }
}

function Clean-Folders {
    param ([string[]]$Folders)
    foreach ($folder in $Folders) {
        if (Test-Path $folder) {
            Get-ChildItem -Path $folder -Recurse -Force -ErrorAction SilentlyContinue | ForEach-Object {
                try {
                    Remove-Item -Path $_.FullName -Recurse -Force -ErrorAction SilentlyContinue
                } catch {}
            }
        }
    }
}

function Remove-From-Autostart {
    param ([string[]]$Names)
    foreach ($name in $Names) {
        try {
            Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name $name -ErrorAction SilentlyContinue
            Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run" -Name $name -ErrorAction SilentlyContinue
        } catch {}
    }
}

function Remove-From-TaskScheduler {
    param ([string[]]$TaskNames)
    foreach ($task in $TaskNames) {
        try {
            schtasks.exe /Delete /TN $task /F > $null 2>&1
        } catch {}
    }
}

function Remove-Service {
    param ([string]$ServiceName)
    try {
        Stop-Service -Name $ServiceName -Force -ErrorAction SilentlyContinue
        sc.exe delete $ServiceName > $null 2>&1
    } catch {}
}

# Выполнение функций
Stop-Processes -ProcessNames $processes
Delete-Folders -Folders $foldersToCheck
Clean-Folders -Folders $tempFoldersToClean
Remove-From-Autostart -Names $taskNames
Remove-From-TaskScheduler -TaskNames $taskNames

foreach ($service in $servicesToStop) {
    Remove-Service -ServiceName $service
}

# Удаление безопасного режима и перезагрузка
bcdedit /deletevalue {current} safeboot
Start-Sleep -Seconds 10
Restart-Computer -Force
