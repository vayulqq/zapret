Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
function Check-SafeMode {
    $safeModeKey = HKLMSYSTEMCurrentControlSetControlSafeBootOption
    try {
        if (Test-Path $safeModeKey) {
            $safeModeValue = Get-ItemProperty -Path $safeModeKey -Name Option -ErrorAction SilentlyContinue
            if ($safeModeValue.Option -eq 1) {
                return $true
            } else {
                return $false
            }
        } else {
            return $false
        }
    } catch {
        return $false
    }
}
function Check-AdminRights {
    try {
        $currentUser = [Security.Principal.WindowsIdentity]GetCurrent()
        $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
        return $principal.IsInRole([Security.Principal.WindowsBuiltinRole]Administrator)
    } catch {
        return $false
    }
}
$safeMode = Check-SafeMode
$isAdmin = Check-AdminRights
if (-not $safeMode) {
    Write-Host Система не запущена в безопасном режиме. Включите безопасный режим и повторите запуск. -ForegroundColor Yellow
    Write-Host Для входа в безопасный режим откройте msconfig и включите безопасный режим (обязательно с сетью).
    return
}
if (-not $isAdmin) {
    Write-Host Скрипт не запущен от имени администратора. Перезапустите PowerShell с правами администратора. -ForegroundColor Yellow
    return
}
Write-Host Все проверки пройдены. Скрипт работает в безопасном режиме и под правами администратора. -ForegroundColor Green
$processes = @("ddxdiag.exe", "SppExtFileObj.exe", "SteamUpdate.exe", "OriginPlayer.exe", "directxutil.exe", "winws.exe")
$foldersToCheck = @("C:\ProgramData\DirectX", "C:\Users\Public\Libraries\AMD", "C:\Users\Public\Libraries\directx")
$tempFoldersToClean = @($env:Temp, "C:\Windows\Temp")
$taskNames = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "OriginPlayer", "directxutil", "winws")
$servicesToStop = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "directxutil", "DrvSvc", "zapret", "zapret DPI bypass", "windivert")

# Удаление процессов
foreach ($process in $processes) {
    try {
        Stop-Process -Name $process -Force -ErrorAction SilentlyContinue
    } catch {}
}

# Удаление записей из автозагрузки (реестр и папки)
$registryPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
)
foreach ($path in $registryPaths) {
    foreach ($process in $processes) {
        try {
            Remove-ItemProperty -Path $path -Name $process -ErrorAction SilentlyContinue
        } catch {}
    }
}

$startupFolders = @(
    "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup",
    "$env:AppData\Microsoft\Windows\Start Menu\Programs\Startup"
)
foreach ($folder in $startupFolders) {
    if (Test-Path $folder) {
        Get-ChildItem -Path $folder -Force | Where-Object { $processes -contains $_.Name } | Remove-Item -Force -ErrorAction SilentlyContinue
    }
}

# Удаление автозагрузки из служб
foreach ($service in $servicesToStop) {
    try {
        sc.exe stop $service > $null 2>&1
        sc.exe delete $service > $null 2>&1
    } catch {}
}

# Удаление папок
foreach ($folder in $foldersToCheck) {
    if (Test-Path $folder) {
        try {
            Remove-Item -Path $folder -Recurse -Force -ErrorAction SilentlyContinue
        } catch {}
    }
}

# Очистка временных папок
foreach ($temp in $tempFoldersToClean) {
    if (Test-Path $temp) {
        try {
            Get-ChildItem -Path $temp -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        } catch {}
    }
}

# Удаление задач из планировщика
foreach ($task in $taskNames) {
    try {
        schtasks.exe /Delete /TN $task /F > $null 2>&1
    } catch {}
}

# Удаление записей из реестра (общих ключей)
$malwareRegistryKeys = @(
    "HKLM:\Software\ddxdiag",
    "HKCU:\Software\SppExtFileObj",
    "HKLM:\Software\SteamUpdate",
    "HKCU:\Software\directxutil"
)
foreach ($key in $malwareRegistryKeys) {
    if (Test-Path $key) {
        Remove-Item -Path $key -Recurse -Force -ErrorAction SilentlyContinue
    }
}

# Удаление XML-файлов задач
$scheduledTasksPath = "C:\Windows\System32\Tasks"
foreach ($task in $taskNames) {
    $taskPath = Join-Path -Path $scheduledTasksPath -ChildPath $task
    if (Test-Path $taskPath) {
        Remove-Item -Path $taskPath -Recurse -Force -ErrorAction SilentlyContinue
    }
}

# Отключение безопасного режима
function Disable-SafeMode {
    try {
        bcdedit /deletevalue safeboot > $null 2>&1
        Write-Host "Безопасный режим отключен." -ForegroundColor Green
    } catch {
        Write-Host "Не удалось отключить безопасный режим. Проверьте права доступа." -ForegroundColor Red
    }
}
try {
    $basePath = "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options"
    $subKeys = Get-ChildItem -Path $basePath | Where-Object { $_.PSIsContainer }

    foreach ($subKey in $subKeys) {
        $parameters = Get-ItemProperty -Path $subKey.PSPath -ErrorAction SilentlyContinue
        if ($parameters -and $parameters.PSObject.Properties.Name -contains "MinimumStackCommitInBytes") {
            Remove-ItemProperty -Path $subKey.PSPath -Name MinimumStackCommitInBytes -ErrorAction Stop
        }
    }
} catch {
    Write-Host "Произошла ошибка: $_" -ForegroundColor Red
}

Disable-SafeMode

# Ожидание и перезагрузка ПК
Start-Sleep -Seconds 10
Write-Host "Перезагрузка компьютера..." -ForegroundColor Green
shutdown.exe /r /t 0
