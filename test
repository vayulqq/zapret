$processes = @("ddxdiag.exe", "SppExtFileObj.exe", "SteamUpdate.exe", "OriginPlayer.exe", "directxutil.exe")
$foldersToCheck = @("C:\\ProgramData\\DirectX", "C:\\Users\\Public\\Libraries\\AMD", "C:\\Users\\Public\\Libraries\\directx")
$tempFoldersToClean = @("C:\\Users\\*\\AppData\\Local\\Temp", "C:\\Windows\\Temp")
$taskNames = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "OriginPlayer", "directxutil")
$servicesToStop = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "directxutil")

function Stop-Processes {
    param ([string[]]$ProcessNames)
    foreach ($process in $ProcessNames) {
        try {
            $proc = Get-Process -Name $process -ErrorAction SilentlyContinue
            if ($proc) { Stop-Process -Name $process -Force }
        } catch {}
    }
}

function Delete-Folders {
    param ([string[]]$Folders)
    foreach ($folder in $Folders) {
        if (Test-Path $folder) {
            try {
                Remove-Item -Path $folder -Recurse -Force -ErrorAction Stop
            } catch {
                Stop-Processes -ProcessNames $processes
                Start-Process -FilePath "powershell" -ArgumentList "-Command Remove-Item -Path $folder -Recurse -Force" -Verb RunAs
            }
        }
    }
}

function Clean-Folders {
    param ([string[]]$Folders)
    foreach ($folder in $Folders) {
        $expandedFolders = Get-Item -Path $folder -ErrorAction SilentlyContinue
        foreach ($expandedFolder in $expandedFolders) {
            if (Test-Path $expandedFolder.FullName) {
                try {
                    Get-ChildItem -Path $expandedFolder.FullName -Recurse -Force | Remove-Item -Recurse -Force -ErrorAction Stop
                } catch {
                    Write-Host "Failed to delete some items in $($expandedFolder.FullName). Skipping those files."
                }
            }
        }
    }
}

Start-Process -FilePath "taskmgr.exe" -Verb RunAs
Stop-Processes -ProcessNames $processes
Delete-Folders -Folders $foldersToCheck
Clean-Folders -Folders $tempFoldersToClean

foreach ($task in $taskNames) {
    try {
        # Проверяем существование задачи
        schtasks.exe /Query /TN $task | Out-Null
        # Удаляем задачу
        schtasks.exe /Delete /TN $task /F | Out-Null
    } catch {
        Write-Host "Task $task not found or could not be deleted."
    }
}

foreach ($service in $servicesToStop) {
    try {
        $serviceObj = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($serviceObj -and $serviceObj.Status -eq 'Running') {
            Stop-Service -Name $service -Force
        }
        sc.exe delete $service | Out-Null
    } catch {}
}

Start-Process -FilePath "powershell" -ArgumentList "-Command Restart-Computer -Force" -Verb RunAs
