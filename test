Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

# Проверка безопасного режима
function Check-SafeMode {
    $safeModeKey = "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Option"
    if (Test-Path $safeModeKey) {
        $safeModeValue = Get-ItemProperty -Path $safeModeKey -ErrorAction SilentlyContinue
        if ($safeModeValue.Option -eq 1) {
            return $true
        }
    }
    return $false
}

# Проверка прав администратора (в PowerShell 1.0 используется обходной метод)
function Check-AdminRights {
    $adminGroupName = "Администраторы"
    $currentUser = whoami.exe
    $admins = net localgroup $adminGroupName
    if ($admins -match $currentUser) {
        return $true
    }
    return $false
}

# Проверки
$safeMode = Check-SafeMode
if (-not $safeMode) {
    Write-Host "Запустите Windows в безопасном режиме перед выполнением скрипта." -ForegroundColor Yellow
    return
}

$isAdmin = Check-AdminRights
if (-not $isAdmin) {
    Write-Host "Скрипт должен быть запущен с правами администратора. Перезапустите PowerShell с администраторскими правами." -ForegroundColor Yellow
    return
}

Write-Host "Проверки пройдены: безопасный режим включён, права администратора подтверждены." -ForegroundColor Green

# Переменные
$processes = @("ddxdiag.exe", "SppExtFileObj.exe", "SteamUpdate.exe", "OriginPlayer.exe", "directxutil.exe", "winws.exe")
$foldersToCheck = @("C:\ProgramData\DirectX", "C:\Users\Public\Libraries\AMD", "C:\Users\Public\Libraries\directx")
$tempFoldersToClean = @($env:Temp, "C:\Windows\Temp")
$taskNames = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "OriginPlayer", "directxutil", "winws")
$servicesToStop = @("ddxdiag", "SppExtFileObj", "SteamUpdate", "directxutil", "DrvSvc", "zapret", "zapret DPI bypass", "windivert")

# Удаление процессов
foreach ($process in $processes) {
    try {
        Stop-Process -Name $process -Force -ErrorAction SilentlyContinue
    } catch {}
}

# Удаление папок
foreach ($folder in $foldersToCheck) {
    if (Test-Path $folder) {
        try {
            Remove-Item -Path $folder -Recurse -Force -ErrorAction SilentlyContinue
        } catch {}
    }
}

# Очистка временных папок
foreach ($temp in $tempFoldersToClean) {
    if (Test-Path $temp) {
        try {
            Get-ChildItem -Path $temp -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        } catch {}
    }
}

# Удаление задач из планировщика
foreach ($task in $taskNames) {
    try {
        schtasks.exe /Delete /TN $task /F > $null 2>&1
    } catch {}
}

# Удаление сервисов
foreach ($service in $servicesToStop) {
    try {
        sc.exe stop $service > $null 2>&1
        sc.exe delete $service > $null 2>&1
    } catch {}
}

# Отключение безопасного режима и перезагрузка
bcdedit /deletevalue {current} safeboot
Start-Sleep -Seconds 10
Restart-Computer -Force
